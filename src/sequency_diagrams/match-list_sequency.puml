@startuml
actor Client as C
participant "Router /game-status/match-list" as R
participant "GameStatusController" as GC
participant "GameStatusService" as GS
participant "Giocatore Model" as G
participant "Partita Model" as P
participant "JWT Middleware" as JWT
participant "ErrorFactory" as EF

C -> R: GET /game-status/match-list?startDate=yyyy-MM-dd (token)
R -> JWT: authenticateJWT(token)
alt Token non valido o assente
    JWT -> EF: createError('UNAUTHORIZED', 'Autenticazione richiesta')
    EF --> JWT: Error
    JWT -> R: next(error)
    R -> C: 401 Unauthorized
else Token valido
    JWT -> GC: getMatchList(req, res, next)

    GC -> G: findByPk(req.user.id_giocatore)
    alt Giocatore non trovato
        G --> GC: null
        GC -> EF: createError('FORBIDDEN', 'Giocatore non trovato')
        EF --> GC: Error
        GC -> R: next(error)
        R -> C: 403 Forbidden
    else Giocatore trovato
        G --> GC: giocatore

        GC -> GS: getMatchList(id_giocatore, startDate)

        alt Partite trovate
            GS -> P: findAll({ id_giocatore, startDate })
            P --> GS: partite
            GS -> GC: return partite
            GC -> R: res.status(200).json(partite)
            R -> C: 200 OK (Lista partite)
        else Nessuna partita trovata
            GS -> GC: []
            GC -> R: res.status(200).json([])
            R -> C: 200 OK (Nessuna partita trovata)
        end
    end
end
@enduml
