@startuml
actor Client as C
participant "Router /game-status/win-certify/:id_partita" as R
participant "GameStatusController" as GC
participant "GameStatusService" as GS
participant "Giocatore Model" as G
participant "Partita Model" as P
participant "PDF Generator" as PDF
participant "JWT Middleware" as JWT
participant "ErrorFactory" as EF

C -> R: GET /game-status/win-certify/:id_partita (token)
R -> JWT: authenticateJWT(token)
alt Token non valido o assente
    JWT -> EF: createError('UNAUTHORIZED', 'Autenticazione richiesta')
    EF --> JWT: Error
    JWT -> R: next(error)
    R -> C: 401 Unauthorized
else Token valido
    JWT -> GC: getVictoryCertify(req, res, next)

    GC -> GS: getVictoryCertify(id_partita)

    GS -> P: findByPk(id_partita)
    alt Partita non trovata
        P --> GS: null
        GS -> EF: createError('NOT_FOUND', 'Partita non trovata')
        EF --> GS: Error
        GS -> GC: throw error
        GC -> R: next(error)
        R -> C: 404 Not Found
    else Partita trovata
        P --> GS: partita
        GS -> G: findByPk(id_vincitore)

        alt Vincitore non trovato
            G --> GS: null
            GS -> EF: createError('NOT_FOUND', 'Vincitore non trovato')
            EF --> GS: Error
            GS -> GC: throw error
            GC -> R: next(error)
            R -> C: 404 Not Found
        else Vincitore trovato
            G --> GS: vincitore

            GS -> PDF: generateVictoryCertifyPDF(partita, vincitore)
            PDF --> GS: pdfBuffer
            GS -> GC: return pdfBuffer
            GC -> R: res.send(pdfBuffer)
            R -> C: 200 OK (PDF inviato)
        end
    end
end
@enduml
